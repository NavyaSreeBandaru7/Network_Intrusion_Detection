# Advanced Network Intrusion Detection System - Docker Configuration
# Multi-stage build for optimized production image

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (if any)
RUN npm install --only=production || echo "No npm dependencies found"

# Copy source code
COPY . .

# Validate and optimize files
RUN apk add --no-cache python3 py3-pip \
    && python3 -c "
import re, json
# Validate package.json
with open('package.json') as f:
    json.load(f)
print('Package.json validated')

# Validate HTML structure
with open('index.html') as f:
    content = f.read()
    if len(content) < 1000:
        raise ValueError('HTML file seems too small')
print('HTML file validated')
" \
    && echo "Build validation completed"

# Production stage
FROM nginx:1.24-alpine AS production

# Install security updates and required packages
RUN apk update && apk upgrade \
    && apk add --no-cache \
        curl \
        bash \
        openssl \
        logrotate \
        fail2ban \
    && rm -rf /var/cache/apk/*

# Create application user
RUN addgroup -g 1001 -S nids \
    && adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nids -g nids nids

# Create necessary directories
RUN mkdir -p /var/www/nids \
    && mkdir -p /var/log/nids \
    && mkdir -p /etc/nginx/ssl \
    && mkdir -p /var/cache/nginx \
    && chown -R nids:nids /var/www/nids \
    && chown -R nids:nids /var/log/nids

# Copy application files from builder stage
COPY --from=builder --chown=nids:nids /app/index.html /var/www/nids/
COPY --from=builder --chown=nids:nids /app/README.md /var/www/nids/
COPY --from=builder --chown=nids:nids /app/LICENSE /var/www/nids/

# Copy nginx configuration
COPY --chown=root:root docker/nginx.conf /etc/nginx/nginx.conf
COPY --chown=root:root docker/default.conf /etc/nginx/conf.d/default.conf

# Copy security configurations
COPY --chown=root:root docker/security-headers.conf /etc/nginx/conf.d/security-headers.conf
COPY --chown=root:root docker/ssl.conf /etc/nginx/conf.d/ssl.conf

# Copy monitoring and maintenance scripts
COPY --chown=root:root docker/entrypoint.sh /entrypoint.sh
COPY --chown=root:root docker/healthcheck.sh /healthcheck.sh
COPY --chown=root:root docker/monitor.sh /usr/local/bin/monitor.sh

# Make scripts executable
RUN chmod +x /entrypoint.sh /healthcheck.sh /usr/local/bin/monitor.sh

# Configure log rotation
COPY --chown=root:root docker/logrotate.conf /etc/logrotate.d/nids

# Set up fail2ban for security
COPY --chown=root:root docker/jail.local /etc/fail2ban/jail.local

# Configure file permissions
RUN chmod 644 /var/www/nids/* \
    && chmod 755 /var/www/nids \
    && chmod 644 /etc/nginx/conf.d/* \
    && chmod 644 /etc/logrotate.d/nids

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /healthcheck.sh

# Expose ports
EXPOSE 80 443

# Set environment variables
ENV NGINX_WORKER_PROCESSES=auto \
    NGINX_WORKER_CONNECTIONS=1024 \
    NGINX_KEEPALIVE_TIMEOUT=65 \
    NGINX_GZIP=on \
    LOG_LEVEL=warn \
    TZ=UTC

# Labels for metadata
LABEL maintainer="NIDS Team <nids@example.com>" \
      version="1.0.0" \
      description="Advanced Network Intrusion Detection System" \
      vendor="Security Solutions Inc." \
      release-date="2025-08-13" \
      security.contact="security@example.com"

# Switch to non-root user for running nginx
USER nids

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Default command
CMD ["nginx", "-g", "daemon off;"]

# Security best practices:
# - Non-root user
# - Minimal base image
# - No unnecessary packages
# - Security headers configured
# - Health checks enabled
# - Log rotation configured
# - Fail2ban for intrusion prevention
